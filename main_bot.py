import pytz
import datetime
from typing import Dict, Any, Optional
from slack_bolt import App
from slack_bolt.adapter.socket_mode import SocketModeHandler
from config import Config
from redis_bot import (
    set_thread_ts, record_task, get_thread_ts,
    generate_message_from_redis, get_task_deadlines, find_task_in_text,
    set_task_assignment, find_task_by_pattern  # –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
)

# Setup logging and validate config
logger = Config.setup_logging()
Config.validate_required_env_vars()

# –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º Bot Token –¥–ª—è App, App Token –¥–ª—è Socket Mode
app = App(token=Config.SLACK_BOT_TOKEN)

def generate_message(day_override: Optional[str] = None) -> str:
    """Generate message for debug mode."""
    try:
        message = generate_message_from_redis(day_override=day_override, debug_mode=True)
        if "_–ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è_" in message:
            logger.warning("Tasks not found in Redis, using fallback logic")
        return message
    except Exception as e:
        logger.error(f"Error generating debug message: {e}")
        return "‚ùå Error generating debug message"

@app.event("app_mention")
def handle_task_update(event: Dict[str, Any], say, client) -> None:
    #Handle app mentions for task completion and debug commands.
    try:
        logger.info(f"Bot mentioned: {event.get('user')} - {event.get('text', '')}")

        text = event.get("text", "")
        user = event.get("user")
        thread_ts = event.get("thread_ts") or event.get("ts")
        riga = pytz.timezone(Config.TIMEZONE)
        ts = datetime.datetime.now(riga)

        # Debug command to simulate cron task
        if "debug" in text.lower():
            try:
                debug_text = text.lower()
                day_override = "Monday" if "monday" in debug_text else None
                message = generate_message(day_override=day_override)

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–∞–º–∏
                response = client.chat_postMessage(
                    channel=Config.SLACK_CHANNEL_ID,
                    text=message
                )
                set_thread_ts(response["ts"], debug_mode=True)

                say(
                    text=f"<@{user}> sent task message (debug mode)",
                    thread_ts=response["ts"]  # –í —Ç—Ä–µ–¥–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                )
                logger.info(f"Debug message sent by user {user}")
                return

            except Exception as e:
                logger.error(f"Error handling debug command: {e}")
                # –û—Ç–≤–µ—á–∞–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç—Ä–µ–¥–µ
                say(
                    text=f"<@{user}> ‚ùå Error sending debug message",
                    thread_ts=thread_ts
                )
                return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º debug —Ä–µ–∂–∏–º –ø–æ thread_ts
        debug_mode = False
        production_thread_ts = get_thread_ts(debug_mode=False)
        debug_thread_ts = get_thread_ts(debug_mode=True)

        if thread_ts == debug_thread_ts:
            debug_mode = True
            logger.info("üîß DEBUG MODE: –∏—Å–ø–æ–ª—å–∑—É–µ–º debug_routine_state")
        elif thread_ts == production_thread_ts:
            debug_mode = False
            logger.info("üìã PRODUCTION MODE: –∏—Å–ø–æ–ª—å–∑—É–µ–º slack_routine_state")
        else:
            # –ï—Å–ª–∏ –Ω–µ –≤ –∏–∑–≤–µ—Å—Ç–Ω–æ–º —Ç—Ä–µ–¥–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º production –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            debug_mode = False
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º production thread_ts –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            if production_thread_ts:
                thread_ts = production_thread_ts
            logger.info("üìã DEFAULT MODE: –∏—Å–ø–æ–ª—å–∑—É–µ–º slack_routine_state")

        task = find_task_in_text(text)
        if task:
            ok, msg = record_task(task, user, debug_mode=debug_mode)
            if not ok:
                say(
                    text=f"<@{user}> {msg}",
                    thread_ts=thread_ts
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥–ª–∞–π–Ω—ã
            task_deadlines = get_task_deadlines()
            deadline = task_deadlines.get(task)

            if deadline:
                deadline_dt = riga.localize(datetime.datetime.combine(ts.date(), deadline))
                logger.info(f"‚è±Ô∏è –°–µ–π—á–∞—Å: {ts.strftime('%H:%M:%S')} | –î–µ–¥–ª–∞–π–Ω –¥–ª—è {task}: {deadline_dt.strftime('%H:%M:%S')}")

                if ts > deadline_dt:
                    prefix = "üîß DEBUG: " if debug_mode else ""
                    say(
                        text=f"{prefix}<@{user}> {task} –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –ø–æ–∑–¥–Ω–æ!",
                        thread_ts=thread_ts
                    )
                else:
                    client.reactions_add(
                        channel=event["channel"],
                        timestamp=event["ts"],
                        name="white_check_mark"
                    )
            else:
                # –ó–∞–¥–∞—á–∏ –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞ - –ø—Ä–æ—Å—Ç–æ –≥–∞–ª–æ—á–∫–∞
                client.reactions_add(
                    channel=event["channel"],
                    timestamp=event["ts"],
                    name="white_check_mark"
                )
        else:
            prefix = "üîß DEBUG: " if debug_mode else ""
            say(
                text=f"{prefix}<@{user}> —è –Ω–µ –ø–æ–Ω—è–ª, –æ –∫–∞–∫–æ–π –∑–∞–¥–∞—á–µ —Ä–µ—á—å ü§î. –ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: `@bot LPB done`",
                thread_ts=thread_ts
            )

    except Exception as e:
        logger.error(f"Error in handle_task_update: {e}")
        try:
            say(
                text=f"<@{user}> ‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã",
                thread_ts=thread_ts
            )
        except:
            logger.error("Failed to send error message to user")

@app.command("/set-fin-duty")
def handle_set_fin_duty(ack, command, say):
    #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set-fin-duty
    ack()

    try:
        user_id = command.get("user_id")
        text = command.get("text", "").strip()

        # –ò—â–µ–º –∑–∞–¥–∞—á—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é "fin-duty" –∏–ª–∏ "fin duty"
        task_name = find_task_by_pattern("fin")

        if not task_name:
            say("‚ùå –ó–∞–¥–∞—á–∞ —Å 'fin' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
            return

        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        if not text:
            # –ü—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ - —Å–Ω–∏–º–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
            if set_task_assignment(task_name):
                say(f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–∏ *{task_name}* —Å–Ω—è—Ç–æ")
            else:
                say("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º user ID –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è (@UXXXXXXX)
        import re
        user_mention_match = re.search(r'<@([UW][A-Z0-9]+)>', text)

        if user_mention_match:
            mentioned_user_id = user_mention_match.group(1)

            if set_task_assignment(task_name, mentioned_user_id):
                say(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <@{mentioned_user_id}> –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞–¥–∞—á—É *{task_name}*")
            else:
                say("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        else:
            say("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/set-fin-duty @username`")

    except Exception as e:
        logger.error(f"Error in handle_set_fin_duty: {e}")
        say("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

if __name__ == "__main__":
    SocketModeHandler(app, Config.SLACK_APP_TOKEN).start()
