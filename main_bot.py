import pytz
import os
import re
import datetime
from slack_bolt import App
from slack_bolt.adapter.socket_mode import SocketModeHandler
from slack_sdk.web import WebClient
from redis_bot import (
    set_thread_ts, record_task, get_thread_ts,
    generate_message_from_redis, get_task_deadlines, find_task_in_text
)

# ENV: SLACK_BOT_TOKEN, SLACK_APP_TOKEN, SLACK_CHANNEL_ID
app = App(token=os.environ.get("SLACK_APP_TOKEN"))
client = WebClient(token=os.environ.get("SLACK_BOT_TOKEN"))
CHANNEL_ID = os.environ.get("SLACK_CHANNEL_ID")

def generate_message(day_override=None):
    #–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è debug —Ä–µ–∂–∏–º–∞
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Redis —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π debug —Ä–µ–∂–∏–º–∞
    message = generate_message_from_redis(day_override=day_override, debug_mode=True)

    # Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ –µ—Å–ª–∏ Redis –ø—É—Å—Ç
    if "_–ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è_" in message:
        print("‚ö†Ô∏è –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Redis, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É")
        today = datetime.datetime.now()

        if day_override:
            day_name = day_override.capitalize()
            fake_date = today.strftime('%d %B') + f" ({day_name})"
        else:
            day_name = today.strftime('%A')
            fake_date = today.strftime('%d %B (%A)')

        if day_name == "Monday":
            tasks = [
                "- [ ] Statements",
                "- [ ] LPB –¥–æ 12:00",
                "- [ ] –ü—Ä–æ–≤–µ—Ä–∫–∞ KYC-1 –¥–æ 11:00",
                "- [ ] –ü—Ä–æ–≤–µ—Ä–∫–∞ KYC-2 –ø–æ—Å–ª–µ 15:00"
            ]
        else:
            tasks = [
                "- [ ] LPB –¥–æ 12:00",
                "- [ ] –ü—Ä–æ–≤–µ—Ä–∫–∞ KYC-1 –¥–æ 11:00",
                "- [ ] –ü—Ä–æ–≤–µ—Ä–∫–∞ KYC-2 –ø–æ—Å–ª–µ 15:00"
            ]

        header = f"üîß DEBUG: üéì Routine tasks for *{fake_date}*"
        return header + "\n\n" + "\n".join(tasks)

    return message

@app.event("app_mention")
def handle_task_update(event, say):
    print("üëÄ BOT GOT MENTION:", event)  # ‚Üê –æ—Ç–ª–∞–¥–∫–∞
    text = event.get("text", "")
    user = event.get("user")
    thread_ts = event.get("thread_ts") or event.get("ts")
    riga = pytz.timezone("Europe/Riga")
    ts = datetime.datetime.now(riga)

    # Debug command to simulate cron task
    if "debug" in text.lower():
        debug_text = text.lower()
        day_override = "Monday" if "monday" in debug_text else None
        message = generate_message(day_override=day_override)

        response = client.chat_postMessage(channel=CHANNEL_ID, text=message)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º debug —Ä–µ–∂–∏–º –¥–ª—è thread_ts
        set_thread_ts(response["ts"], debug_mode=True)
        say(text=f"<@{user}> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–∞–º–∏ (debug mode)", thread_ts=response["ts"])
        return
    #########################################

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ debug —Ä–µ–∂–∏–º –∏–ª–∏ –æ–±—ã—á–Ω—ã–π
    debug_mode = False
    debug_thread_ts = get_thread_ts(debug_mode=True)

    if thread_ts == debug_thread_ts:
        debug_mode = True
        print("üîß DEBUG MODE: –∏—Å–ø–æ–ª—å–∑—É–µ–º debug_routine_state")

    task = find_task_in_text(text)
    if task:
        ok, msg = record_task(task, user, debug_mode=debug_mode)
        if not ok:
            say(text=f"<@{user}> {msg}", thread_ts=thread_ts)
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–µ–¥–ª–∞–π–Ω—ã –∏–∑ Redis
        task_deadlines = get_task_deadlines()
        deadline = task_deadlines.get(task)

        if deadline:
            deadline_dt = riga.localize(datetime.datetime.combine(ts.date(), deadline))
            print(f"‚è±Ô∏è –°–µ–π—á–∞—Å: {ts.strftime('%H:%M:%S')} | –î–µ–¥–ª–∞–π–Ω –¥–ª—è {task}: {deadline_dt.strftime('%H:%M:%S')}")

            if ts > deadline_dt:
                prefix = "üîß DEBUG: " if debug_mode else ""
                say(text=f"{prefix}<@{user}> {task} –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –ø–æ–∑–¥–Ω–æ!", thread_ts=thread_ts)
            else:
                client.reactions_add(channel=event["channel"], timestamp=event["ts"], name="white_check_mark")
        else:
            # –î–ª—è –∑–∞–¥–∞—á –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞ –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞–≤–∏–º –≥–∞–ª–æ—á–∫—É
            client.reactions_add(channel=event["channel"], timestamp=event["ts"], name="white_check_mark")
    else:
        prefix = "üîß DEBUG: " if debug_mode else ""
        say(text=f"{prefix}<@{user}> —è –Ω–µ –ø–æ–Ω—è–ª, –æ –∫–∞–∫–æ–π –∑–∞–¥–∞—á–µ —Ä–µ—á—å ü§î. –ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: `@bot LPB done`", thread_ts=thread_ts)

if __name__ == "__main__":
    SocketModeHandler(app, os.environ["SLACK_APP_TOKEN"]).start()
