import json
import datetime
import redis
import re
import logging
from typing import Dict, List, Optional, Tuple, Any
from config import Config

# Setup logging
logger = logging.getLogger(__name__)

# Redis connection with error handling
try:
    r = redis.Redis.from_url(Config.REDIS_URL)
    # Test connection
    r.ping()
    logger.info("Successfully connected to Redis")
except redis.ConnectionError as e:
    logger.error(f"Failed to connect to Redis: {e}")
    raise
except Exception as e:
    logger.error(f"Unexpected error connecting to Redis: {e}")
    raise

def load_state(debug_mode: bool = False) -> Dict[str, Any]:
    #Load routine state (normal or debug mode).
    try:
        key = Config.DEBUG_ROUTINE_STATE if debug_mode else Config.SLACK_ROUTINE_STATE
        data = r.get(key)
        if data:
            return json.loads(data)
        return {}
    except (redis.RedisError, json.JSONDecodeError) as e:
        logger.error(f"Error loading state (debug_mode={debug_mode}): {e}")
        return {}

def save_state(state: Dict[str, Any], debug_mode: bool = False) -> bool:
    #Save routine state (normal or debug mode).
    try:
        key = Config.DEBUG_ROUTINE_STATE if debug_mode else Config.SLACK_ROUTINE_STATE
        r.set(key, json.dumps(state))
        logger.debug(f"State saved successfully (debug_mode={debug_mode})")
        return True
    except (redis.RedisError, json.JSONEncodeError) as e:
        logger.error(f"Error saving state (debug_mode={debug_mode}): {e}")
        return False

def load_task_base() -> Dict[str, Any]:
    #Load task base from Redis.
    try:
        data = r.get(Config.TASK_BASE)
        if data:
            return json.loads(data)
        logger.warning("Task base is empty or not found")
        return {}
    except (redis.RedisError, json.JSONDecodeError) as e:
        logger.error(f"Error loading task base: {e}")
        return {}

def save_task_base(task_base: Dict[str, Any]) -> bool:
    #Save task base to Redis.
    try:
        r.set(Config.TASK_BASE, json.dumps(task_base))
        logger.debug("Task base saved successfully")
        return True
    except (redis.RedisError, json.JSONEncodeError) as e:
        logger.error(f"Error saving task base: {e}")
        return False

def set_thread_ts(thread_ts, debug_mode=False):
    #–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å thread_ts –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è
    state = load_state(debug_mode)
    state["date"] = datetime.date.today().isoformat()
    state["thread_ts"] = thread_ts
    state["completed"] = {}
    save_state(state, debug_mode)

def get_thread_ts(debug_mode=False):
    #–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π thread_ts
    state = load_state(debug_mode)
    return state.get("thread_ts")

def record_task(task, user, debug_mode=False):
    #–ó–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
    state = load_state(debug_mode)
    today = datetime.date.today().isoformat()

    if state.get("date") != today:
        return False, "–°—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –Ω–æ–≤–æ–µ —É—Ç—Ä–æ, –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–¥–∞."

    if "completed" not in state:
        state["completed"] = {}

    if task in state["completed"]:
        return False, "–≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ—á–µ–Ω–∞ —Ä–∞–Ω–µ–µ."

    now = datetime.datetime.now().strftime("%H:%M")
    state["completed"][task] = {"user": user, "time": now}
    save_state(state, debug_mode)
    return True, None

def get_completed_tasks(debug_mode=False):
    #–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    state = load_state(debug_mode)
    return state.get("completed", {})

def get_tasks_for_day(day_name):
    #–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏–∑ task_base
    task_base = load_task_base()

    if not task_base:
        return []

    tasks = []
    for task_id, task_data in task_base.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞—á–∞ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
        task_days = task_data.get("days", "all")
        if task_days == "all" or day_name in task_days:
            # –î–æ–±–∞–≤–ª—è–µ–º ID –∑–∞–¥–∞—á–∏ –∫ –¥–∞–Ω–Ω—ã–º
            task_with_id = task_data.copy()
            task_with_id["id"] = task_id
            tasks.append(task_with_id)

    return tasks

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–¥–ª–∞–π–Ω–∞
    tasks.sort(key=lambda x: x.get("deadline", "23:59"))
    return tasks

def format_task_line(task):
    #–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∑–∞–¥–∞—á–∏ –¥–ª—è Slack
    name = task.get("name", "")
    deadline = task.get("deadline", "")
    asana_url = task.get("asana_url", "")
    comments = task.get("comments", "")

    # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —á–µ–∫–±–æ–∫—Å–æ–º –∏ —ç–º–æ–¥–∑–∏ –≤—Ä–µ–º–µ–Ω–∏
    if deadline:
        task_line = f"- [ ] *{name}* –¥–æ {deadline}"
    else:
        task_line = f"- [ ] *{name}*"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Asana –≤ Slack-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    if asana_url:
        task_line += f" ‚Ä¢ <{asana_url}|Asana>"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Å –æ—Ç—Å—Ç—É–ø–æ–º
    if comments:
        task_line += f"\n    _{comments}_"

    return task_line

def generate_message_from_redis(day_override=None, debug_mode=False):
    #–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Slack –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Redis —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
    today = datetime.datetime.now()

    if day_override:
        day_name = day_override.capitalize()
        date_str = today.strftime('%d %B') + f" ({day_name})"
        # –î–ª—è day_override –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd/mm
        current_date = today.strftime('%d/%m')
    else:
        day_name = today.strftime('%A')
        date_str = today.strftime('%d %B (%A)')
        current_date = today.strftime('%d/%m')

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–Ω—è
    tasks = get_tasks_for_day(day_name)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    debug_prefix = "üîß DEBUG: " if debug_mode else ""
    header = f"{debug_prefix}üéì Routine tasks for *{date_str}*"

    # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á
    if not tasks:
        return header + "\n\n_–ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è_"

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
    grouped_tasks = group_tasks_by_period(tasks)

    message_parts = [header]

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –±–µ–∑ –≥—Ä—É–ø–ø—ã
    if grouped_tasks["ungrouped"]:
        message_parts.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
        for task in grouped_tasks["ungrouped"]:
            message_parts.append(format_task_line(task))

    # –ü–æ—Ç–æ–º —É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–¥–∞—á–∏
    if grouped_tasks["morning"]:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–º–µ–Ω—ã
        morning_employees = get_employees_for_date_and_period(current_date, "morning")
        employees_mention = format_employees_mention(morning_employees)

        if employees_mention:
            message_parts.append(f"\n*–£—Ç—Ä–æ*:\n{employees_mention}")
        else:
            message_parts.append("\n*–£—Ç—Ä–æ*:")

        for task in grouped_tasks["morning"]:
            message_parts.append(format_task_line(task))

    # –ü–æ—Ç–æ–º –≤–µ—á–µ—Ä–Ω–∏–µ –∑–∞–¥–∞—á–∏
    if grouped_tasks["evening"]:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–π —Å–º–µ–Ω—ã
        evening_employees = get_employees_for_date_and_period(current_date, "evening")
        employees_mention = format_employees_mention(evening_employees)

        if employees_mention:
            message_parts.append(f"\n*–í–µ—á–µ—Ä* _(–¥–µ–ª–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ 15:00)_:\n{employees_mention}")
        else:
            message_parts.append("\n*–í–µ—á–µ—Ä*:")

        for task in grouped_tasks["evening"]:
            message_parts.append(format_task_line(task))

    return "\n".join(message_parts)

def get_task_deadlines():
    #–ü–æ–ª—É—á–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    task_base = load_task_base()
    deadlines = {}

    for task_id, task_data in task_base.items():
        deadline_str = task_data.get("deadline", "")
        if deadline_str:
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É "HH:MM" –≤ –æ–±—ä–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–∏
                hour, minute = map(int, deadline_str.split(":"))
                deadlines[task_data.get("name", "").upper()] = datetime.time(hour=hour, minute=minute)
            except ValueError:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                continue
        else:
            # –ó–∞–¥–∞—á–∏ –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞
            deadlines[task_data.get("name", "").upper()] = None

    return deadlines

def get_task_names():
    #–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    task_base = load_task_base()

    if not task_base:
        print("–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, Redis –ø—É—Å—Ç")

    names = []
    for task_id, task_data in task_base.items():
        name = task_data.get("name", "")
        if name:
            names.append(name)

    return names

def build_task_regex():
    #–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á
    task_names = get_task_names()

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–µ—Ñ–∏—Å—ã)
    escaped_names = [re.escape(name) for name in task_names]

    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: (LPB|KYC-1|–ü—Ä–æ–≤–µ—Ä–∫–∞ KYC-2|Statements - –≤—ã–≥—Ä—É–∑–∫–∏).*done
    pattern = r"(?i)(" + "|".join(escaped_names) + r").*done"
    return pattern

def find_task_in_text(text):
    #–ù–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Ç–µ–∫—Å—Ç–µ
    pattern = build_task_regex()
    match = re.search(pattern, text)

    if match:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        found_name = match.group(1)

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ deadlines
        # (–ø—Ä–∏–≤–æ–¥–∏–º –∫ —Ç–æ–º—É –≤–∏–¥—É, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ get_task_deadline)
        normalized_name = found_name.upper()

        return normalized_name

    return None

def group_tasks_by_period(tasks):
    #–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º (—É—Ç—Ä–æ/–≤–µ—á–µ—Ä)
    groups = {
        "ungrouped": [],  # –ó–∞–¥–∞—á–∏ –±–µ–∑ –≥—Ä—É–ø–ø—ã
        "morning": [],    # –£—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–¥–∞—á–∏
        "evening": []     # –í–µ—á–µ—Ä–Ω–∏–µ –∑–∞–¥–∞—á–∏
    }

    for task in tasks:
        period = task.get("period", "")
        if period == "morning":
            groups["morning"].append(task)
        elif period == "evening":
            groups["evening"].append(task)
        else:
            groups["ungrouped"].append(task)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–¥–ª–∞–π–Ω–∞
    for group_name in groups:
        groups[group_name].sort(key=lambda x: x.get("deadline", "23:59"))

    return groups

#Employees

def load_employees() -> Dict[str, Any]:
    #–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ Redis
    try:
        data = r.get(Config.EMPLOYEES)
        if data:
            return json.loads(data)
        logger.warning("Employee data is empty or not found")
        return {}
    except (redis.RedisError, json.JSONDecodeError) as e:
        logger.error(f"Error loading employees: {e}")
        return {}

def save_employees(employees: Dict[str, Any]) -> bool:
    #–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ Redis
    try:
        r.set(Config.EMPLOYEES, json.dumps(employees))
        logger.debug("Employees data saved successfully")
        return True
    except (redis.RedisError, json.JSONEncodeError) as e:
        logger.error(f"Error saving employees: {e}")
        return False

def get_employees_for_date_and_period(date_str: str, period: str) -> List[Dict[str, str]]:
    #–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –ø–µ—Ä–∏–æ–¥
    employees = load_employees()
    working_employees = []

    for emp_id, emp_data in employees.items():
        name = emp_data.get("name", "")
        slack_id = emp_data.get("slack_id", "")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã —Ä–∞–±–æ—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        if period == "morning":
            work_dates = emp_data.get("morning_dates", [])
        elif period == "evening":
            work_dates = emp_data.get("evening_dates", [])
        else:
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤ —ç—Ç—É –¥–∞—Ç—É
        if date_str in work_dates:
            working_employees.append({
                "name": name,
                "slack_id": slack_id,
                "employee_id": emp_id
            })

    return working_employees

def format_employees_mention(employees: List[Dict[str, str]]) -> str:
    #–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è Slack
    if not employees:
        return ""

    mentions = []
    for emp in employees:
        slack_id = emp.get("slack_id", "")
        if slack_id:
            mentions.append(f"<@{slack_id}>")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç slack_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è
            mentions.append(emp.get("name", "Unknown"))

    return "[" + " + ".join(mentions) + "]"

def load_task_assignments() -> Dict[str, str]:
    #–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∑–∞–¥–∞—á–∏ –∏–∑ employees
    try:
        employees_data = load_employees()
        # –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ employees
        return employees_data.get("task_assignments", {})
    except Exception as e:
        logger.error(f"Error loading task assignments: {e}")
        return {}

def save_task_assignments(assignments: Dict[str, str]) -> bool:
    #–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∑–∞–¥–∞—á–∏ –≤ employees
    try:
        employees_data = load_employees()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ
        employees_data["task_assignments"] = assignments
        return save_employees(employees_data)
    except Exception as e:
        logger.error(f"Error saving task assignments: {e}")
        return False

def set_task_assignment(task_name: str, user_id: str = None) -> bool:
    #–ù–∞–∑–Ω–∞—á–∏—Ç—å –∏–ª–∏ —Å–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–¥–∞—á–∏
    assignments = load_task_assignments()

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–ø—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
    task_key = task_name.upper()

    if user_id:
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        assignments[task_key] = user_id
        logger.info(f"User {user_id} assigned to task {task_name}")
    else:
        # –°–Ω–∏–º–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        if task_key in assignments:
            del assignments[task_key]
            logger.info(f"Assignment removed from task {task_name}")

    return save_task_assignments(assignments)

def get_task_assignment(task_name: str) -> str:
    #–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–¥–∞—á–∏
    assignments = load_task_assignments()
    task_key = task_name.upper()
    return assignments.get(task_key, "")

def find_task_by_pattern(pattern: str) -> str:
    #–ù–∞–π—Ç–∏ –∑–∞–¥–∞—á—É –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, fin-duty)
    task_base = load_task_base()

    pattern_lower = pattern.lower()
    for task_id, task_data in task_base.items():
        task_name = task_data.get("name", "").lower()
        if pattern_lower in task_name:
            return task_data.get("name", "")

    return ""
