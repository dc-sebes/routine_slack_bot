import os
import datetime
import pytz
from slack_sdk import WebClient
from redis_bot import get_tasks_for_day, get_completed_tasks, get_thread_ts

client = WebClient(token=os.environ.get("SLACK_BOT_TOKEN"))
CHANNEL_ID = os.environ.get("SLACK_CHANNEL_ID")

# –ó–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ–≥–∏–Ω–≥–∞
TEAM_MENTION = "<!subteam^S07BD1P55GT|@sup>"

def get_incomplete_tasks():
    #–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    riga = pytz.timezone("Europe/Riga")
    today = datetime.datetime.now(riga)
    day_name = today.strftime('%A')
    current_hour = today.hour

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    all_tasks = get_tasks_for_day(day_name)

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ slack_routine_state
    completed_tasks = get_completed_tasks(debug_mode=False)
    completed_names = [name.upper() for name in completed_tasks.keys()]

    # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    incomplete_tasks = []
    overdue_tasks = []

    for task in all_tasks:
        task_name_upper = task.get("name", "").upper()

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        if task_name_upper in completed_names:
            continue

        deadline_str = task.get("deadline", "")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ–¥–ª–∞–π–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if deadline_str:
            try:
                hour, minute = map(int, deadline_str.split(":"))
                deadline_hour = hour

                # –í 13:00 –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º 16:00+
                if current_hour == 13 and deadline_hour >= 16:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
                current_time = today.time()
                deadline_time = datetime.time(hour=hour, minute=minute)

                if current_time > deadline_time:
                    overdue_tasks.append(task)
                else:
                    incomplete_tasks.append(task)

            except ValueError:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—ã—á–Ω—ã–µ
                incomplete_tasks.append(task)
        else:
            # –ó–∞–¥–∞—á–∏ –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
            incomplete_tasks.append(task)

    return incomplete_tasks, overdue_tasks

def format_reminder_message():
    #–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    riga = pytz.timezone("Europe/Riga")
    today = datetime.datetime.now(riga)
    current_time = today.strftime('%H:%M')
    date_str = today.strftime('%d %B (%A)')

    incomplete_tasks, overdue_tasks = get_incomplete_tasks()

    # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if not incomplete_tasks and not overdue_tasks:
        return None

    message_parts = []

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    header = f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ {current_time} - {date_str}"
    message_parts.append(header)

    # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    if overdue_tasks:
        message_parts.append("\nüö® *–ü–†–û–°–†–û–ß–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò:*")
        for task in overdue_tasks:
            name = task.get("name", "")
            deadline = task.get("deadline", "")
            line = f"‚Ä¢ *{name}* (–¥–µ–¥–ª–∞–π–Ω –±—ã–ª –≤ {deadline})"
            message_parts.append(line)

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    if incomplete_tasks:
        message_parts.append("\nüìã *–ù–ï–í–´–ü–û–õ–ù–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò:*")
        for task in incomplete_tasks:
            name = task.get("name", "")
            deadline = task.get("deadline", "")
            line = f"‚Ä¢ *{name}*"
            if deadline:
                line += f" (–¥–æ {deadline})"
            message_parts.append(line)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ –∫–æ–º–∞–Ω–¥—ã –≤ –∫–æ–Ω–µ—Ü
    message_parts.append(f"\n{TEAM_MENTION}")

    return "\n".join(message_parts)

def send_reminder():
    #–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ Slack
    message = format_reminder_message()

    if not message:
        print("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        return False

    # –ü–æ–ª—É—á–∞–µ–º thread_ts —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
    thread_ts = get_thread_ts(debug_mode=False)

    try:
        if thread_ts:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç—Ä–µ–¥ —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
            response = client.chat_postMessage(
                channel=CHANNEL_ID,
                text=message,
                thread_ts=thread_ts
            )
            print(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç—Ä–µ–¥")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            response = client.chat_postMessage(
                channel=CHANNEL_ID,
                text=message
            )
            print(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
    today = datetime.datetime.now()
    if today.weekday() < 5:  # —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏
        current_time = today.strftime('%H:%M')
        print(f"‚è∞ –ó–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏ –≤ {current_time}")
        send_reminder()
    else:
        print("–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
